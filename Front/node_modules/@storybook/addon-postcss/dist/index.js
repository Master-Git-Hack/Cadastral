import { logger } from '@storybook/node-logger';
import postcss from 'postcss';
function wrapLoader(loader, options) {
    if (options === false) {
        return [];
    }
    return [{ loader, options }];
}
export const webpack = (webpackConfig = {}, options = {}) => {
    var _a, _b, _c;
    const { styleLoaderOptions, postcssLoaderOptions, rule = {} } = options;
    let { cssLoaderOptions } = options;
    if (typeof cssLoaderOptions === 'object') {
        cssLoaderOptions = Object.assign(Object.assign({}, cssLoaderOptions), { importLoaders: 1 });
    }
    let postcssFactory = postcss;
    if (typeof postcssLoaderOptions === 'object') {
        postcssFactory = (_a = postcssLoaderOptions === null || postcssLoaderOptions === void 0 ? void 0 : postcssLoaderOptions.implementation) !== null && _a !== void 0 ? _a : postcss;
    }
    const { version } = postcssFactory();
    logger.info(`=> Using PostCSS preset with postcss@${version}`);
    return Object.assign(Object.assign({}, webpackConfig), { module: Object.assign(Object.assign({}, webpackConfig.module), { rules: [
                ...((_c = (_b = webpackConfig.module) === null || _b === void 0 ? void 0 : _b.rules) !== null && _c !== void 0 ? _c : []).filter((r) => r.custom_id !== 'storybook_css'),
                Object.assign(Object.assign({ test: /\.css$/, sideEffects: true }, rule), { use: [
                        ...wrapLoader(require.resolve('style-loader').toString(), styleLoaderOptions),
                        ...wrapLoader(require.resolve('css-loader').toString(), cssLoaderOptions),
                        ...wrapLoader(require.resolve('postcss-loader').toString(), postcssLoaderOptions),
                    ] }),
            ] }) });
};
//# sourceMappingURL=index.js.map